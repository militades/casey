import subprocess as sp
from os import chdir
import shelf

class CAconfig:

  ##two constructors. one for new CAs and one for loading CA data.
  def __init__(self, name):
    this.name = name
    caHost= ''
    crlDays= 30
    md = 'sha256'
    defDays= 375
    countryCode= ''
    state= ''
    locality= ''
    orgName= ''
    orgUnit= ''
    emailAddr=''

  def genKeyPair(self):


  def genEnviron(self):

    path = f'/share/casey/{name}/ca'
    sp.run(['mkdir', '-p', path])
    chdir(path)
    ap.run(['mkdir', 'cert', 'crl', 'newcerts', 'private'])
    ap.run(['chmod', '700', 'private'])
    touch = open('index.txt', 'w')
    touch.close()
    touch = open('serial', 'w')
    touch.write('1000')
    touch.close()

  def initVar(self):

  def loadCA(self, target):
    ##use shelf to load paths
    ca = shelf.open(f'/share/casey/{target}')
    #load stuff


  def createConfig(self):

    opensslConfig=
    f'''
    [ ca ]
    default_ca = CA_default

    [ CA_default ]
    dir               = /share/{this.name}/ca
    certs             = $dir/certs
    crl_dir           = $dir/crl
    new_certs_dir     = $dir/newcerts
    database          = $dir/index.txt
    serial            = $dir/serial
    RANDFILE          = $dir/private/.rand
    private_key       = $dir/private/{this.name}.key.pem
    certificate       = $dir/certs/{this.name}.cert.pem
    crlnumber         = $dir/crlnumber
    crl               = $dir/crl/ca.crl.pem
    crl_extensions    = crl_ext
    default_crl_days  = {this.crlDays}
    default_md        = {this.md}
    name_opt          = ca_default
    cert_opt          = ca_default
    default_days      = {this.defDays}
    preserve          = no
    policy            = policy_strict

    [ policy_strict ]
    countryName             = match
    stateOrProvinceName     = match
    organizationName        = match
    organizationalUnitName  = optional
    commonName              = supplied
    emailAddress            = optional

    [ policy_loose ]
    countryName             = optional
    stateOrProvinceName     = optional
    localityName            = optional
    organizationName        = optional
    organizationalUnitName  = optional
    commonName              = supplied
    emailAddress            = optional

    [ req ]
    default_bits        = 2048
    distinguished_name  = req_distinguished_name
    string_mask         = utf8only
    default_md          = sha256
    x509_extensions     = v3_ca

    [ req_distinguished_name ]
    countryName                     = Country Name (2 letter code)
    stateOrProvinceName             = State or Province Name
    localityName                    = Locality Name
    0.organizationName              = Organization Name
    organizationalUnitName          = Organizational Unit Name
    commonName                      = Common Name
    emailAddress                    = Email Address

    countryName_default             = {this.countryCode}
    stateOrProvinceName_default     = {this.state}
    localityName_default            = {this.locality}
    0.organizationName_default      = {this.orgName}
    organizationalUnitName_default  = {this.orgUnit}
    emailAddress_default            = {this.emailAddr}

    [ v3_ca ]
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid:always,issuer
    basicConstraints = critical, CA:true
    keyUsage = critical, digitalSignature, cRLSign, keyCertSign

    [ v3_intermediate_ca ]
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid:always,issuer
    basicConstraints = critical, CA:true, pathlen:0
    keyUsage = critical, digitalSignature, cRLSign, keyCertSign

    [ usr_cert ]
    basicConstraints = CA:FALSE
    nsCertType = client, email
    nsComment = "OpenSSL Generated Client Certificate with CAsey"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer
    keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage = clientAuth, emailProtection

    [ server_cert ]
    basicConstraints = CA:FALSE
    nsCertType = server
    nsComment = "OpenSSL Generated Server Certificate with CAsey"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer:always
    keyUsage = critical, digitalSignature, keyEncipherment
    extendedKeyUsage = serverAuth
    authorityInfoAccess = OCSP;URI:http://oscp.{this.caHost}

    [ crl_ext ]
    authorityKeyIdentifier=keyid:always

    [ ocsp ]
    basicConstraints = CA:FALSE
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer
    keyUsage = critical, digitalSignature
    extendedKeyUsage = critical, OCSPSigning
    '''
